{
    "name": "Cargo doc workflow",
    "true": {
        "workflow_call": {
            "inputs": {
                "PROJECT_ROOT": {
                    "description": "Path to th project to document",
                    "type": "string",
                    "default": "."
                },
                "ONLY_LIB": {
                    "description": "If document package's library",
                    "type": "boolean",
                    "default": false
                },
                "RELEASE_MODE": {
                    "description": "If document optimized artifacts with the release profile",
                    "type": "boolean",
                    "default": true
                },
                "OUTPUT_FOLDER": {
                    "description": "Path where to save output documentation",
                    "type": "string",
                    "default": "website_build"
                },
                "ADDITIONAL_OPTIONS": {
                    "description": "Additional options space-seperated list to pass to cargo doc command",
                    "type": "string",
                    "default": ""
                }
            }
        }
    },
    "jobs": {
        "cargo_doc": {
            "runs-on": "ubuntu-latest",
            "container": {
                "image": "rust:1.57-buster"
            },
            "steps": [
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v2"
                },
                {
                    "name": "Move to project root directory",
                    "run": "echo \"CIWORKSPACE_PATH=$GITHUB_WORKSPACE\" >> $GITHUB_ENV\ncd ${{ inputs.PROJECT_ROOT }}\necho \"PROJECT_ROOT_RELATIVE_PATH=$(pwd)\" >> $GITHUB_ENV\necho \"GITHUB_WORKSPACE : $GITHUB_WORKSPACE\" \n"
                },
                {
                    "name": "Check existence of Cargo.toml manifest file",
                    "run": "cd ${{ inputs.PROJECT_ROOT }}\nif [ ! -f \"Cargo.toml\" ]; then\n  echo \"ERROR --> Any Cargo.toml file isn't present in the given root project folder ${{ inputs.PROJECT_ROOT }}\"\n  echo \"INSIDE_IF_PATH=$(pwd)\" >> $GITHUB_ENV\nfi\n"
                },
                {
                    "name": "Create a copy of inputs which will be updated further",
                    "run": "echo \"ADDITIONAL_OPTIONS=${{inputs.ADDITIONAL_OPTIONS}}\" >> $GITHUB_ENV\necho \"OUTPUT_FOLDER=${{inputs.OUTPUT_FOLDER}}\" >> $GITHUB_ENV\n"
                },
                {
                    "name": "Check if --lib option is activated",
                    "run": "if [ ${{ inputs.ONLY_LIB }} ]; then\n  echo \"ADDITIONAL_OPTIONS=${{env.ADDITIONAL_OPTIONS}} --lib\" >> $GITHUB_ENV\nfi\n"
                },
                {
                    "name": "Check if --release option is activated",
                    "run": "if [ ${{ inputs.RELEASE_MODE }} ]; then\n  echo \"ADDITIONAL_OPTIONS=${{env.ADDITIONAL_OPTIONS}} --release\" >> $GITHUB_ENV\nfi\n"
                },
                {
                    "name": "Check if the GITHUB WORKSPACE and the PROJECT ROOT are different",
                    "run": "if [ ! ${{env.PROJECT_ROOT_RELATIVE_PATH}} -ef ${{env.CIWORKSPACE_PATH}} ]; then\n  echo \"Both paths are different. Test result negation : $? \"\n  echo \"OUTPUT_FOLDER=$GITHUB_WORKSPACE/${{ inputs.OUTPUT_FOLDER }}\" >> $GITHUB_ENV\nfi   \n"
                },
                {
                    "name": "Build documentation",
                    "run": "echo \"Inputs ONLY_LIB: ${{ inputs.ONLY_LIB }}, RELEASE_MODE: ${{ inputs.RELEASE_MODE }}\"\necho \"Inputs OUTPUT_FOLDER: ${{ inputs.OUTPUT_FOLDER }}, ADDITIONAL_OPTIONS: ${{ inputs.ADDITIONAL_OPTIONS }}\"\necho \"Env updates OUTPUT_FOLDER: ${{ env.OUTPUT_FOLDER }}, ADDITIONAL_OPTIONS: ${{ env.ADDITIONAL_OPTIONS }}\"\necho \"PROJECT_ROOT_RELATIVE_PATH : ${{env.PROJECT_ROOT_RELATIVE_PATH}} and GITHUB_WORKSPACE : $GITHUB_WORKSPACE / its context: ${{github.workspace}}\"\ncd ${{ inputs.PROJECT_ROOT }}\ncargo doc --target-dir ${{env.OUTPUT_FOLDER}} ${{ env.ADDITIONAL_OPTIONS }}\n"
                },
                {
                    "name": "Upload artifacts",
                    "uses": "actions/upload-artifact@v2",
                    "with": {
                        "name": "Documentation",
                        "path": "${{ env.OUTPUT_FOLDER }}",
                        "retention-days": 15
                    }
                }
            ]
        }
    }
}